<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Magnus | Build</title>
    <link href="https://fonts.googleapis.com/css2?family=Audiowide&family=Inconsolata:wght@200..900&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Righteous&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
    <style>
        /* Base styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        body {
            background: #0d0d0d; /* Solid black background */
            min-height: 100vh;
            color: white;
            overflow-x: hidden;
            position: relative;
        }

        /* Aurora background - Removed glowing animation */
        .aurora-bg {
            display: none; /* Hide aurora background */
        }

        .container {
            display: flex;
            height: 100vh;
            position: relative;
            z-index: 1;
            padding: 15px;
            gap: 15px;
        }

        /* Left Sidebar */
        .sidebar {
            width: 300px;
            background: rgba(255, 255, 255, 0.08); /* Frosted glass base */
            backdrop-filter: blur(30px);
            border-right: 1px solid rgba(255, 255, 255, 0.15);
            border-radius: 15px;
            padding: 20px;
            display: flex;
            flex-direction: column;
            /* Removed overflow-y: auto from sidebar */
            box-shadow: none; /* Removed glowing shadow */
            flex-shrink: 0;
        }

        .logo {
            font-family: 'Audiowide', sans-serif;
            font-size: 1.8rem;
            margin-bottom: 30px;
            font-weight: 800;
            text-align: center;
            color:#ff4d00;
            /* background: linear-gradient(45deg, #ff4500, #ff8c00); /* Orange/red gradient */
            /* -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            animation: none; */
        }

        .chat-history {
            flex: 1;
            margin-bottom: 20px;
            display: flex;
            flex-direction: column;
            gap: 12px;
            overflow-y: auto; /* Added scrollbar to chat-history */
            max-height: calc(100vh - 250px); /* Adjust max-height to fit within sidebar */
        }

        .chat-item {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 18px;
            cursor: pointer;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            border: 1px solid rgba(255, 255, 255, 0.1);
            position: relative;
            overflow: hidden;
            flex-shrink: 0;
        }

        .chat-item::before {
            display: none; /* Removed shimmer effect */
        }

        .chat-item:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: none; /* Removed transform */
            box-shadow: none; /* Removed shadow */
        }

        .chat-item.active {
            background: rgba(255, 69, 0, 0.15);
            border-color: rgba(255, 69, 0, 0.4);
            box-shadow: none; /* Removed shadow */
        }

        .chat-title {
            font-size: 14px;
            font-weight: 600;
            margin-bottom: 8px;
            color: #ffffff;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .chat-time {
            font-size: 12px;
            color: #ccc;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        /* Prompt Input and Generate Button in Sidebar */
        .sidebar-prompt-container {
            width: 100%;
            display: flex;
            flex-direction: column;
            gap: 10px;
            padding-top: 20px;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            margin-top: auto; /* Pushes it to the bottom */
            flex-shrink: 0; /* Prevent shrinking */
        }

        .sidebar-prompt-textarea {
            width: 100%;
            padding: 12px 18px;
            border-radius: 12px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 0.95rem;
            resize: vertical;
            min-height: 50px;
            max-height: 120px;
            outline: none;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
            box-shadow: none; /* Removed shadow */
        }

        .sidebar-prompt-textarea::placeholder {
            color: #aaa;
        }

        .sidebar-prompt-textarea:focus {
            border-color: #ff4500;
            box-shadow: none; /* Removed glow on focus */
        }

        .sidebar-generate-btn {
            background: linear-gradient(135deg, #ff4500, #ff8c00);
            border: none;
            border-radius: 12px;
            padding: 12px 20px;
            color: white;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.4s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            font-size: 0.95rem;
            white-space: nowrap;
            box-shadow: none; /* Removed shadow */
        }

        .sidebar-generate-btn:hover {
            transform: none; /* Removed transform */
            box-shadow: none; /* Removed shadow */
        }

        /* Main Content Area */
        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: rgba(255, 255, 255, 0.08); /* Frosted glass base */
            backdrop-filter: blur(30px);
            border-radius: 15px;
            box-shadow: none; /* Removed glowing shadow */
            overflow: hidden;
        }

        /* Header */
        .header {
            background: rgba(255, 255, 255, 0.05);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding: 10px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: none; /* Removed shadow */
            flex-shrink: 0;
        }

        .tabs {
            display: flex;
            gap: 8px;
            background: rgba(255, 255, 255, 0.08);
            padding: 4px;
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .tab {
            padding: 8px 16px;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            font-weight: 500;
            font-size: 13px;
            color: #ccc;
        }

        .tab.active {
            background: linear-gradient(135deg, #ff4500, #ff8c00);
            color: white;
            box-shadow: none; /* Removed shadow */
        }

        .tab:hover:not(.active) {
            background: rgba(255, 255, 255, 0.12);
            color: #fff;
        }

        .header-controls {
            display: flex;
            gap: 8px;
            align-items: center;
        }

        .control-btn {
            width: 38px;
            height: 38px;
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.15);
            background: rgba(255, 255, 255, 0.05);
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }

        .control-btn::before {
            display: none; /* Removed shimmer effect */
        }

        .control-btn:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: none; /* Removed transform */
            box-shadow: none; /* Removed shadow */
        }

        /* Content Area */
        .content-area {
            flex: 1;
            position: relative;
            display: flex;
            flex-direction: column;
            padding: 20px;
            overflow:auto;
        }

        /* Generation View */
        .generation-view {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            text-align: center;
            /* Removed overflow-y: auto from generation-view */
            border-radius: 15px;
        }

        .generation-container {
            max-width: 300px; /* Further reduced max-width */
            width: 100%;
            padding: 8px; /* Further reduced padding */
            margin-bottom: 0;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            flex-grow: 0;
            flex-shrink: 0;
        }

        .generation-icon {
            width: 50px; /* Reduced size */
            height: 50px; /* Reduced size */
            background: rgba(255, 255, 255, 0.08);
            border: 2px solid rgba(255, 69, 0, 0.4);
            border-radius: 15px; /* Adjusted border-radius */
            margin-bottom: 8px; /* Reduced margin */
            display: flex;
            align-items: center;
            justify-content: center;
            animation: none;
            position: relative;
            overflow: hidden;
        }

        .generation-icon::before {
            display: none;
        }

        .generation-icon i {
            font-size: 20px; /* Reduced font size */
            background: linear-gradient(45deg, #ff4500, #ff8c00);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            z-index: 1;
        }

        .generation-title {
            font-size: 16px; /* Reduced font size */
            font-weight: 700;
            margin-bottom: 4px; /* Reduced margin */
            background: linear-gradient(45deg, #ffffff, #ff4500);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .generation-subtitle {
            font-size: 10px; /* Reduced font size */
            color: #aaaaaa;
            margin-bottom: 10px; /* Reduced margin */
            line-height: 1.5;
        }

        .progress-section {
            margin-bottom: 8px; /* Reduced margin */
            width: 100%;
        }

        .progress-item {
            display: flex;
            align-items: center;
            gap: 6px; /* Reduced gap */
            padding: 6px 8px; /* Reduced padding */
            margin-bottom: 4px; /* Reduced margin */
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px; /* Reduced border-radius */
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.4s ease;
            position: relative;
            overflow: hidden;
        }

        .progress-item::before {
            display: none;
        }

        .progress-item.completed {
            background: rgba(255, 140, 0, 0.08);
            border-color: rgba(255, 140, 0, 0.25);
            box-shadow: none;
        }

        .progress-item.active {
            background: rgba(255, 69, 0, 0.08);
            border-color: rgba(255, 69, 0, 0.25);
            box-shadow: none;
        }

        .progress-icon {
            width: 24px; /* Reduced size */
            height: 24px; /* Reduced size */
            border-radius: 6px; /* Reduced border-radius */
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(255, 255, 255, 0.1);
            font-size: 10px; /* Reduced font size */
            transition: all 0.4s ease;
        }

        .progress-item.completed .progress-icon {
            background: rgba(255, 140, 0, 0.2);
            color: #ff8c00;
            animation: none;
        }

        .progress-item.active .progress-icon {
            background: rgba(255, 69, 0, 0.2);
            color: #ff4500;
            animation: none;
        }

        .progress-text {
            flex: 1;
            font-weight: 600;
            font-size: 11px; /* Reduced font size */
        }

        .progress-status {
            font-size: 9px; /* Reduced font size */
            font-weight: 700;
            display: flex;
            align-items: center;
            gap: 3px;
        }

        .progress-item.completed .progress-status {
            color: #ff8c00;
        }

        .progress-item.active .progress-status {
            color: #ff4500;
        }

        .progress-bar-container {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px; /* Reduced border-radius */
            padding: 10px; /* Reduced padding */
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: none;
            width: 100%;
        }

        .progress-bar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px; /* Reduced margin */
        }

        .progress-bar {
            width: 100%;
            height: 6px; /* Reduced height */
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px; /* Reduced border-radius */
            overflow: hidden;
            position: relative;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #ff4500, #ff8c00);
            width: 0%;
            border-radius: 3px; /* Reduced border-radius */
            transition: width 0.8s ease;
            position: relative;
        }

        .progress-fill::after {
            display: none;
        }

        /* Preview Panel */
        .preview-panel {
            width: 100%;
            height: 100%;
            display: none;
            flex-direction: column;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            overflow: hidden;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: none; /* Removed shadow */
        }

        .preview-panel.active {
            display: flex;
        }

        .preview-header {
            display: flex;
            align-items: center;
            padding: 10px 20px;
            background: rgba(255, 255, 255, 0.08);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            gap: 10px;
            flex-shrink: 0;
        }

        .url-bar {
            flex: 1;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.15);
            border-radius: 6px;
            padding: 6px 12px;
            color: #aaa;
            font-size: 13px;
            font-family: 'Inconsolata', monospace;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .preview-content {
            flex: 1;
            background: white;
            border-radius: 0 0 15px 15px;
            overflow: hidden;
        }

        .preview-iframe {
            width: 100%;
            height: 100%;
            border: none;
            background: white;
        }

        /* Code Panel */
        .code-panel {
            width: 100%;
            height: 100%;
            display: none;
            flex-direction: column;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            overflow: hidden;
            border: 1px solid rgba(255, 255, 255, 0.08);
            box-shadow: none; /* Removed shadow */
        }

        .code-panel.active {
            display: flex;
        }

        .code-tabs {
            display: flex;
            background: rgba(255, 255, 255, 0.08);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding: 0 20px;
            border-radius: 15px 15px 0 0;
            flex-shrink: 0;
        }

        .code-tab {
            padding: 12px 18px;
            cursor: pointer;
            transition: all 0.3s ease;
            border-bottom: 2px solid transparent;
            font-size: 13px;
            color: #aaa;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .code-tab.active {
            color: #ff4500;
            border-bottom-color: #ff4500;
        }

        .code-tab:hover:not(.active) {
            color: #fff;
        }

        .code-content {
            flex: 1;
            height: 100%; /* Explicit height for flex item */
            overflow: auto; /* Ensure scrollability for code content */
        }

        .code-block {
            display: none;
            height: 100%; /* Ensure code-block takes full height of its parent */
        }

        .code-block.active {
            display: block;
        }

        .code-block pre {
            margin: 0;
            padding: 20px;
            height: 100%; /* Ensure pre takes full height of its parent */
            overflow: auto; /* Ensure scrollability for pre tag */
            background: #1a1a1a !important;
            font-family: 'Inconsolata', monospace;
            font-size: 13px;
            line-height: 1.6;
            border-radius: 0 0 15px 15px;
        }

        /* Floating particles - Removed completely */
        .floating-particles {
            display: none;
        }

        /* Error States */
        .error-container {
            text-align: center;
            padding: 40px;
            color: #ff6b6b;
            display: none;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            width: 100%;
            background: rgba(255, 255, 255, 0.08);
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: none; /* Removed shadow */
        }

        .error-icon {
            font-size: 60px;
            margin-bottom: 20px;
            opacity: 0.7;
        }

        .error-title {
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 10px;
        }

        .error-message {
            color: #aaa;
            margin-bottom: 20px;
        }

        .retry-btn {
            background: linear-gradient(135deg, #ff4500, #ff8c00);
            border: none;
            border-radius: 8px;
            padding: 10px 20px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .retry-btn:hover {
            transform: none; /* Removed transform */
            box-shadow: none; /* Removed shadow */
        }

        /* Loading States */
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.8);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            backdrop-filter: blur(5px);
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 3px solid rgba(255, 255, 255, 0.1);
            border-top: 3px solid #ff4500;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                flex-direction: column;
                padding: 10px;
                gap: 10px;
            }
            
            .sidebar {
                width: 100%;
                height: auto;
                max-height: 250px;
                overflow-x: hidden;
                overflow-y: auto; /* Re-added for mobile in case content exceeds */
                border-right: none;
                border-bottom: 1px solid rgba(255, 255, 255, 0.08);
                padding: 15px;
            }
            
            .chat-history {
                display: flex;
                flex-direction: column;
                gap: 8px;
                margin-bottom: 15px;
                max-height: 150px; /* Adjust max-height for mobile chat history */
            }
            
            .chat-item {
                min-width: unset;
                margin-bottom: 0;
            }
            
            .logo {
                display: none;
            }
            
            .sidebar-prompt-container {
                padding-top: 15px;
                margin-top: 15px;
            }

            .sidebar-generate-btn {
                width: 100%;
                padding: 12px;
            }
            
            .main-content {
                border-radius: 15px;
            }

            .header {
                padding: 15px;
                flex-wrap: wrap;
                gap: 10px;
            }
            
            .tabs {
                flex-grow: 1;
                justify-content: center;
            }

            .header-controls {
                flex-grow: 1;
                justify-content: center;
            }
            
            .generation-container {
                padding: 20px;
            }
            
            .generation-title {
                font-size: 24px;
            }
            
            .generation-icon {
                width: 80px;
                height: 80px;
                margin-bottom: 20px;
            }
            
            .generation-icon i {
                font-size: 30px;
            }

            .progress-item {
                padding: 15px;
            }

            .progress-icon {
                width: 35px;
                height: 35px;
                font-size: 14px;
            }

            .progress-text {
                font-size: 14px;
            }
        }

        @media (max-width: 480px) {
            .sidebar {
                padding: 10px;
            }
            
            .header {
                padding: 10px;
            }
            
            .generation-title {
                font-size: 20px;
            }
            
            .progress-item {
                padding: 12px;
            }

            .progress-icon {
                width: 30px;
                height: 30px;
                font-size: 12px;
            }

            .progress-text {
                font-size: 13px;
            }
        }
    </style>
</head>
<body>
    <div class="aurora-bg"></div>
    <div class="container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="logo">MAGNUS</div>
            
            <div class="chat-history">
                <!-- User Prompt Chat Item -->
                <div class="chat-item">
                    <div class="chat-title">
                        <i class="fas fa-user"></i>
                        <span id="userPromptTitle">Your Prompt</span>
                    </div>
                    <div class="chat-time">
                        <span id="userPromptTime"><i class="far fa-clock"></i> 12:50 pm</span>
                        <i class="fas fa-copy" style="cursor: pointer;" title="Copy prompt" onclick="copyPrompt(event)"></i>
                    </div>
                </div>

                <!-- Magnus Response Chat Item (for generated code) -->
                <div class="chat-item active">
                    <div class="chat-title">
                        <i class="fas fa-robot"></i>
                        <span id="magnusResponseTitle">Magnus Response</span>
                    </div>
                    <div class="chat-time">
                        <span id="magnusResponseTime"><i class="far fa-clock"></i> 12:51 pm</span>
                        <i class="fas fa-check" style="color: #ff8c00; display: none;"></i>
                    </div>
                </div>
            </div>
            
            <!-- Prompt Input and Generate Button in Sidebar -->
            <div class="sidebar-prompt-container">
                <textarea id="promptInput" class="sidebar-prompt-textarea" placeholder="Describe the code you want to generate..."></textarea>
                <button id="generateBtn" class="sidebar-generate-btn">
                    <i class="fas fa-rocket"></i> Generate Code
                </button>
            </div>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Header -->
            <div class="header">
                <div class="tabs">
                    <div class="tab active" data-tab="preview">
                        <i class="fas fa-eye"></i>
                        Preview
                    </div>
                    <div class="tab" data-tab="code">
                        <i class="fas fa-code"></i>
                        Code
                    </div>
                </div>
                
                <div class="header-controls">
                    <button class="control-btn" id="mobileView" title="Mobile View">
                        <i class="fas fa-mobile-alt"></i>
                    </button>
                    <button class="control-btn" id="desktopView" title="Desktop View">
                        <i class="fas fa-desktop"></i>
                    </button>
                    <button class="control-btn" id="refreshBtn" title="Refresh">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                    <button class="control-btn" id="downloadBtn" title="Download Code">
                        <i class="fas fa-download"></i>
                    </button>
                    <button class="control-btn" id="shareBtn" title="Share">
                        <i class="fas fa-share-alt"></i>
                    </button>
                </div>
            </div>

            <!-- Content Area -->
            <div class="content-area">
                <div class="loading-overlay" id="loadingOverlay">
                    <div class="loading-spinner"></div>
                </div>

                <!-- Initial View / Generation View -->
                <div class="generation-view" id="generationView">
                    <div class="floating-particles">
                        <!-- Particles are now hidden via CSS, but HTML structure remains -->
                    </div>
                    <div class="generation-container">
                        <div class="generation-icon">
                            <i class="fas fa-desktop" id="generationIcon"></i>
                        </div>
                        <h2 class="generation-title" id="generationTitle">Generating your website...</h2>
                        <p class="generation-subtitle" id="generationSubtitle">Start a conversation to generate and preview your website</p>
                        
                        <!-- Progress section is now hidden by default in this view, only shown during active generation -->
                        <div class="progress-section" id="progressSection" style="display: none;">
                            <div class="progress-item" id="analyzeStep">
                                <div class="progress-icon">
                                    <i class="fas fa-search"></i>
                                </div>
                                <div class="progress-text">Understanding request</div>
                                <div class="progress-status">
                                    <i class="fas fa-hourglass-start"></i>
                                    <span>Pending</span>
                                </div>
                            </div>
                            <div class="progress-item" id="planStep">
                                <div class="progress-icon">
                                    <i class="fas fa-lightbulb"></i>
                                </div>
                                <div class="progress-text">Planning solution</div>
                                <div class="progress-status">
                                    <i class="fas fa-hourglass-start"></i>
                                    <span>Pending</span>
                                </div>
                            </div>
                            <div class="progress-item" id="draftStep">
                                <div class="progress-icon">
                                    <i class="fas fa-pencil-alt"></i>
                                </div>
                                <div class="progress-text">Drafting code</div>
                                <div class="progress-status">
                                    <i class="fas fa-hourglass-start"></i>
                                    <span>Pending</span>
                                </div>
                            </div>
                            <div class="progress-item" id="refineStep">
                                <div class="progress-icon">
                                    <i class="fas fa-cogs"></i>
                                </div>
                                <div class="progress-text">Refining code</div>
                                <div class="progress-status">
                                    <i class="fas fa-hourglass-start"></i>
                                    <span>Pending</span>
                                </div>
                            </div>
                            <div class="progress-item" id="finalizeStep">
                                <div class="progress-icon">
                                    <i class="fas fa-check-circle"></i>
                                </div>
                                <div class="progress-text">Finalizing output</div>
                                <div class="progress-status">
                                    <i class="fas fa-hourglass-start"></i>
                                    <span>Pending</span>
                                </div>
                            </div>
                        </div>
                        <div class="progress-bar-container" id="progressBarContainer" style="display: none;">
                            <div class="progress-bar-header">
                                <span>Overall Progress</span>
                                <span id="progressPercent">0%</span>
                            </div>
                            <div class="progress-bar">
                                <div class="progress-fill" id="progressFill"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Preview Panel -->
                <div class="preview-panel" id="previewPanel">
                    <div class="preview-header">
                        <div class="url-bar" id="urlBar"> https://preview.magnus.dev/project/12345 </div>
                        <button class="control-btn" id="openInNew" title="Open in new tab">
                            <i class="fas fa-external-link-alt"></i>
                        </button>
                    </div>
                    <div class="preview-content">
                        <iframe class="preview-iframe" id="previewIframe" src="about:blank"></iframe>
                    </div>
                </div>

                <!-- Code Panel -->
                <div class="code-panel" id="codePanel">
                    <div class="code-tabs">
                        <div class="code-tab active" data-code="output1">
                            <i class="fas fa-file-code"></i> Output 1
                        </div>
                        <div class="code-tab" data-code="output2">
                            <i class="fas fa-file-code"></i> Output 2
                        </div>
                        <div class="code-tab" data-code="output3">
                            <i class="fas fa-file-code"></i> Output 3
                        </div>
                    </div>
                    <div class="code-content">
                        <div class="code-block active" id="output1Code">
                            <pre><code class="language-html">&lt;!-- Generated code will appear here --&gt;</code></pre>
                        </div>
                        <div class="code-block" id="output2Code">
                            <pre><code class="language-css">/* Generated code will appear here */</code></pre>
                        </div>
                        <div class="code-block" id="output3Code">
                            <pre><code class="language-javascript">/* Generated code will appear here */</code></pre>
                        </div>
                    </div>
                </div>

                <!-- Error State -->
                <div class="error-container" id="errorContainer">
                    <div class="error-icon">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <h3 class="error-title">Generation Failed</h3>
                    <p class="error-message" id="errorMessage">Something went wrong while generating your code. Please try again.</p>
                    <button class="retry-btn" onclick="retryGeneration()">
                        <i class="fas fa-redo"></i> Retry Generation
                    </button>
                </div>
            </div>
        </div>
    </div>
    <script>
        // Tab switching functionality
        document.querySelectorAll('.tab').forEach(tab => {
            tab.addEventListener('click', function() {
                document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                this.classList.add('active');
                
                document.getElementById('previewPanel').classList.remove('active');
                document.getElementById('codePanel').classList.remove('active');
                document.getElementById('generationView').style.display = 'none';
                document.getElementById('errorContainer').style.display = 'none';

                const tabType = this.getAttribute('data-tab');
                if (tabType === 'preview') {
                    document.getElementById('previewPanel').classList.add('active');
                    loadPreview();
                } else if (tabType === 'code') {
                    document.getElementById('codePanel').classList.add('active');
                    if (typeof Prism !== 'undefined') {
                        Prism.highlightAll();
                    }
                }
            });
        });

        // Code tab switching
        document.querySelectorAll('.code-tab').forEach(tab => {
            tab.addEventListener('click', function() {
                document.querySelectorAll('.code-tab').forEach(t => t.classList.remove('active'));
                this.classList.add('active');
                
                document.querySelectorAll('.code-block').forEach(block => block.classList.remove('active'));
                
                const codeType = this.getAttribute('data-code');
                document.getElementById(codeType + 'Code').classList.add('active');
                if (typeof Prism !== 'undefined') {
                    Prism.highlightAll();
                }
            });
        });

        // Function to update the progress steps and overall progress bar
        function updateProgress(stepId, statusText, iconClass, isActive, isCompleted) {
            const stepElement = document.getElementById(stepId);
            if (!stepElement) return;

            stepElement.classList.remove('active', 'completed');
            if (isActive) {
                stepElement.classList.add('active');
            }
            if (isCompleted) {
                stepElement.classList.add('completed');
            }

            const statusSpan = stepElement.querySelector('.progress-status span');
            const statusIcon = stepElement.querySelector('.progress-status i');

            if (statusSpan) statusSpan.textContent = statusText;
            if (statusIcon) statusIcon.className = iconClass;
        }

        // Main function to handle code generation
        async function generateCode() {
            const prompt = document.getElementById('promptInput').value.trim();
            if (!prompt) {
                alert('Please enter a prompt to generate code.');
                return;
            }

            // Show generation view and hide others
            document.getElementById('generationView').style.display = 'flex';
            document.getElementById('previewPanel').classList.remove('active');
            document.getElementById('codePanel').classList.remove('active');
            document.getElementById('errorContainer').style.display = 'none';

            // Reset progress and titles for new generation
            document.getElementById('generationTitle').textContent = 'Analyzing your request...';
            document.getElementById('generationSubtitle').textContent = 'Please wait while Magnus generates your code';
            document.getElementById('generationIcon').className = 'fas fa-magic';
            document.getElementById('progressFill').style.width = '0%';
            document.getElementById('progressPercent').textContent = '0%';

            // Show progress section
            document.getElementById('progressSection').style.display = 'block';
            document.getElementById('progressBarContainer').style.display = 'block';

            // Reset all progress items to pending
            document.querySelectorAll('.progress-item').forEach(item => {
                item.classList.remove('active', 'completed');
                item.querySelector('.progress-status').innerHTML = '<i class="fas fa-hourglass-start"></i><span>Pending</span>';
            });

            // Update user prompt in sidebar
            const userPromptTitle = document.getElementById('userPromptTitle');
            if (userPromptTitle) userPromptTitle.textContent = prompt;
            const userPromptTime = document.getElementById('userPromptTime');
            if (userPromptTime) userPromptTime.innerHTML = `<i class="far fa-clock"></i> ${new Date().toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true })}`;

            // Hide Magnus response checkmark initially for new generation
            const magnusCheckmark = document.querySelector('.chat-item.active .fa-check');
            if (magnusCheckmark) magnusCheckmark.style.display = 'none';

            // Define steps with new generic names
            const steps = [
                { id: 'analyzeStep', text: 'Understanding request', icon: 'fas fa-search', delay: 1000 },
                { id: 'planStep', text: 'Planning solution', icon: 'fas fa-lightbulb', delay: 2000 },
                { id: 'draftStep', text: 'Drafting code', icon: 'fas fa-pencil-alt', delay: 3000 },
                { id: 'refineStep', text: 'Refining code', icon: 'fas fa-cogs', delay: 4000 }
            ];

            let currentProgress = 0;
            const totalVisualSteps = steps.length;

            for (let i = 0; i < totalVisualSteps; i++) {
                const step = steps[i];
                if (i > 0) {
                    updateProgress(steps[i - 1].id, 'Complete', 'fas fa-check', false, true);
                }
                updateProgress(step.id, 'Processing...', 'fas fa-spinner fa-spin', true, false);
                // Progress bar calculation now considers the final API call as an additional step
                currentProgress = ((i + 1) / (totalVisualSteps + 1)) * 100;
                document.getElementById('progressFill').style.width = currentProgress + '%';
                document.getElementById('progressPercent').textContent = Math.round(currentProgress) + '%';
                await new Promise(resolve => setTimeout(resolve, step.delay / 2));
            }

            // After all visual steps are processed, indicate fetching from API
            updateProgress('finalizeStep', 'Processing...', 'fas fa-spinner fa-spin', true, false); // Activate finalize step
            document.getElementById('generationTitle').textContent = 'Finalizing...';
            document.getElementById('generationSubtitle').textContent = 'Fetching and compiling output...';
            document.getElementById('generationIcon').className = 'fas fa-download';
            currentProgress = (totalVisualSteps / (totalVisualSteps + 1)) * 100; // Update progress bar to reflect API call pending
            document.getElementById('progressFill').style.width = currentProgress + '%';
            document.getElementById('progressPercent').textContent = Math.round(currentProgress) + '%';


            // --- API Call Integration ---
            try {
                const apiKey = "AIzaSyDSGy7RDlFf_YzKXF4DtKrroCUmofQg1yg"; // If you want to use models other than gemini-2.0-flash or imagen-3.0-generate-002, provide an API key here. Otherwise, leave this as-is.
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                let chatHistory = [];
                chatHistory.push({ role: "user", parts: [{ text: `Generate a complete, single-file HTML, CSS, and JavaScript code for the following prompt. Provide the output as a JSON object with three fields: 'html', 'css', and 'js'. Ensure the HTML includes a <style> tag for CSS and a <script> tag for JavaScript. The HTML should be a full, valid HTML document. The CSS should be complete and functional. The JavaScript should be functional and interactive. Prompt: ${prompt}` }] });

                const payload = {
                    contents: chatHistory,
                    generationConfig: {
                        responseMimeType: "application/json",
                        responseSchema: {
                            type: "OBJECT",
                            properties: {
                                "html": { "type": "STRING" },
                                "css": { "type": "STRING" },
                                "js": { "type": "STRING" }
                            },
                            "propertyOrdering": ["html", "css", "js"]
                        }
                    }
                };

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    const errorBody = await response.text();
                    throw new Error(`API error: ${response.status} ${response.statusText} - ${errorBody}`);
                }

                const result = await response.json();

                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    const jsonString = result.candidates[0].content.parts[0].text;
                    const parsedCode = JSON.parse(jsonString);

                    // Update code blocks (using generic IDs)
                    document.querySelector('#output1Code code').textContent = parsedCode.html;
                    document.querySelector('#output2Code code').textContent = parsedCode.css;
                    document.querySelector('#output3Code code').textContent = parsedCode.js;

                    // Mark FINAL step (finalizeStep) as truly completed after successful API call
                    updateProgress('finalizeStep', 'Complete', 'fas fa-check', false, true);
                    document.getElementById('generationTitle').textContent = 'Code Generated!';
                    document.getElementById('generationSubtitle').textContent = 'Your project is ready!';
                    document.getElementById('generationIcon').className = 'fas fa-check-circle';
                    document.getElementById('progressFill').style.width = '100%'; // Ensure 100% on success
                    document.getElementById('progressPercent').textContent = '100%';

                    // Update chat history with generated code details
                    document.getElementById('magnusResponseTitle').textContent = 'Code Generated!';
                    document.getElementById('magnusResponseTime').innerHTML = `<i class="far fa-clock"></i> ${new Date().toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true })}`;
                    if (magnusCheckmark) magnusCheckmark.style.display = 'inline'; // Show checkmark

                    // Switch to preview tab and load the new code
                    document.querySelector('.tab[data-tab="preview"]').click();
                    document.getElementById('generationView').style.display = 'none';
                    document.getElementById('previewPanel').classList.add('active');

                    // Highlight code in code panel
                    if (typeof Prism !== 'undefined') {
                        Prism.highlightAll();
                    }

                } else {
                    throw new Error("Invalid API response structure or no content generated.");
                }

            } catch (error) {
                console.error('Error fetching code from API:', error);
                document.getElementById('generationView').style.display = 'none';
                document.getElementById('errorContainer').style.display = 'flex';
                document.getElementById('errorMessage').textContent = `Error: ${error.message || 'Could not generate code.'}`;
                // Ensure finalizeStep is marked as failed or reset on error
                updateProgress('finalizeStep', 'Failed', 'fas fa-times', false, false);
                document.getElementById('generationTitle').textContent = 'Generation Failed!';
                document.getElementById('generationSubtitle').textContent = 'Please try again.';
                document.getElementById('generationIcon').className = 'fas fa-exclamation-triangle';
                document.getElementById('progressFill').style.width = '0%'; // Reset progress bar on error
                document.getElementById('progressPercent').textContent = '0%';
            } finally {
                document.getElementById('loadingOverlay').style.display = 'none';
                // Hide progress section and progress bar container after generation (success or fail)
                document.getElementById('progressSection').style.display = 'none';
                document.getElementById('progressBarContainer').style.display = 'none';
            }
        }

        // Load preview content
        function loadPreview() {
            const iframe = document.getElementById('previewIframe');
            if (!iframe) return;

            // Use generic output IDs for code
            const htmlCode = document.querySelector('#output1Code code').textContent;
            const cssCode = document.querySelector('#output2Code code').textContent;
            const jsCode = document.querySelector('#output3Code code').textContent;
            
            // Construct the full HTML for the iframe, embedding CSS and JS directly
            const fullHTML = `
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Preview</title>
                    <style>${cssCode}</style>
                </head>
                <body>
                    ${htmlCode}
                    <script>${jsCode}<\/script>
                </body>
                </html>
            `;
            
            iframe.srcdoc = fullHTML;

            // Re-attach event listener for the action button inside the iframe
            iframe.onload = () => {
                try {
                    const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
                    const actionBtn = iframeDoc.getElementById('actionBtn');
                    if (actionBtn) {
                        actionBtn.onclick = function() {
                            this.style.transform = 'scale(0.95)';
                            setTimeout(() => {
                                this.style.transform = 'scale(1)';
                            }, 100);
                            iframe.contentWindow.alert('Hello from Magnus! Your project is ready to customize.');
                        };
                    }
                } catch (e) {
                    console.warn("Could not access iframe content (likely due to cross-origin restrictions or content not fully loaded yet).", e);
                }
            };
        }

        // Control buttons functionality
        document.getElementById('mobileView').addEventListener('click', function() {
            const iframe = document.getElementById('previewIframe');
            iframe.style.maxWidth = '375px';
            iframe.style.margin = '0 auto';
            this.classList.add('active');
            document.getElementById('desktopView').classList.remove('active');
        });

        document.getElementById('desktopView').addEventListener('click', function() {
            const iframe = document.getElementById('previewIframe');
            iframe.style.maxWidth = '100%';
            iframe.style.margin = '0';
            this.classList.add('active');
            document.getElementById('mobileView').classList.remove('active');
        });

        document.getElementById('refreshBtn').addEventListener('click', function() {
            this.querySelector('i').style.animation = 'spin 0.5s linear';
            setTimeout(() => {
                this.querySelector('i').style.animation = '';
                loadPreview();
            }, 500);
        });

        document.getElementById('downloadBtn').addEventListener('click', function() {
            alert('Download feature will be available soon! For now, you can copy the code from the Code tab.');
        });

        document.getElementById('shareBtn').addEventListener('click', function() {
            document.execCommand('copy');
            const originalText = this.innerHTML;
            this.innerHTML = '<i class="fas fa-check"></i>';
            this.style.background = 'rgba(255, 140, 0, 0.2)';
            setTimeout(() => {
                this.innerHTML = originalText;
                this.style.background = '';
            }, 2000);
        });

        document.getElementById('openInNew').addEventListener('click', function() {
            alert('Opening in new tab is not directly supported for dynamic iframe content due to security. Please copy the code from the "Code" tab.');
        });

        // Copy prompt functionality
        function copyPrompt(event) {
            const promptTextElement = event.target.closest('.chat-item').querySelector('.chat-title span');
            const promptText = promptTextElement ? promptTextElement.textContent : "No prompt found.";
            
            const tempTextArea = document.createElement('textarea');
            tempTextArea.value = promptText;
            document.body.appendChild(tempTextArea);
            tempTextArea.select();
            document.execCommand('copy');
            document.body.removeChild(tempTextArea);

            const icon = event.target;
            const originalClass = icon.className;
            icon.className = 'fas fa-check';
            icon.style.color = '#ff8c00';
            setTimeout(() => {
                icon.className = originalClass;
                icon.style.color = '';
            }, 2000);
            event.stopPropagation();
        }

        // Retry generation
        function retryGeneration() {
            document.getElementById('errorContainer').style.display = 'none';
            document.getElementById('generationView').style.display = 'flex';
            generateCode();
        }

        // Add event listener for the new generate button in sidebar
        document.getElementById('generateBtn').addEventListener('click', generateCode);

        // Start generation simulation on page load
        window.onload = () => {
            const urlParams = new URLSearchParams(window.location.search);
            const initialPrompt = urlParams.get('prompt');
            const promptInput = document.getElementById('promptInput');
            const userPromptTitle = document.getElementById('userPromptTitle');
            const userPromptTime = document.getElementById('userPromptTime');
            const magnusResponseTime = document.getElementById('magnusResponseTime');
            const magnusResponseTitle = document.getElementById('magnusResponseTitle');

            const now = new Date();
            const timeString = now.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });
            
            if (userPromptTime) userPromptTime.innerHTML = `<i class="far fa-clock"></i> ${timeString}`;
            if (magnusResponseTime) magnusResponseTime.innerHTML = `<i class="far fa-clock"></i> ${timeString}`;

            const magnusCheckmark = document.querySelector('.chat-item.active .fa-check');
            if (magnusCheckmark) magnusCheckmark.style.display = 'none';

            if (initialPrompt) {
                const decodedPrompt = decodeURIComponent(initialPrompt);
                if (promptInput) promptInput.value = decodedPrompt;
                if (userPromptTitle) userPromptTitle.textContent = decodedPrompt;
                generateCode(); // Automatically trigger generation
            } else {
                // Initial state when no prompt is provided in URL
                document.getElementById('generationView').style.display = 'flex';
                document.getElementById('previewPanel').classList.remove('active');
                document.getElementById('codePanel').classList.remove('active');
                document.getElementById('errorContainer').style.display = 'none';
                document.getElementById('progressSection').style.display = 'none';
                document.getElementById('progressBarContainer').style.display = 'none';

                // Set initial text for generation view when no prompt is given
                document.getElementById('generationTitle').textContent = 'Generating your website...';
                document.getElementById('generationSubtitle').textContent = 'Start a conversation to generate and preview your website';
                document.getElementById('generationIcon').className = 'fas fa-desktop';
            }
            
            // createParticles(); // Particles are now hidden via CSS, no need to create them dynamically
        };

        document.querySelectorAll('.control-btn').forEach(btn => {
            btn.addEventListener('mouseenter', function() {
                this.style.transform = 'translateY(-2px) scale(1.05)';
            });
            
            btn.addEventListener('mouseleave', function() {
                this.style.transform = '';
            });
        });

        // Function to create floating particles (kept for completeness, though display:none in CSS)
        function createParticles() {
            const container = document.querySelector('.floating-particles');
            if (container) {
                for (let i = 0; i < 5; i++) {
                    const particle = document.createElement('div');
                    particle.className = 'particle';
                    container.appendChild(particle);
                }
            }
        }
    </script>
</body>
</html>
